import openai
from Mining.Analysis.DataStruct.Smells import PROMPTS


class PromptAnalyzer:
    def __init__(self, openai_api_key):
        """
        Initialize the PromptAnalyzer with the OpenAI API key and prompts.
        """
        openai.api_key = openai_api_key

        self.prompts = PROMPTS

    def analyze_with_prompt(self, content, prompt_key):
        """
        Analyze the given content using the specified prompt with OpenAI.

        :param content: The content to analyze.
        :param prompt_key: The key to the prompt in the prompts dictionary.
        :return: The response generated by OpenAI.
        """
        prompt = self.prompts[prompt_key]
        response = openai.Completion.create(
            engine="davinci-codex",
            prompt=prompt + content,
            max_tokens=500
        )
        return response.choices[0].text.strip()

    def analyze_conditions(self, content):
        """
        Analyze the given content for condition-related issues using OpenAI.

        :param content: The content to analyze.
        :return: The response generated by OpenAI.
        """
        return self.analyze_with_prompt(content, 'conditions')

    def analyze_vulnerabilities(self, content):
        """
        Analyze the given content for vulnerabilities using OpenAI.

        :param content: The content to analyze.
        :return: The response generated by OpenAI.
        """
        return self.analyze_with_prompt(content, 'vulnerabilities')

    def analyze_workflow_dispatch(self, content):
        """
        Analyze the given content for workflow_dispatch-related issues using OpenAI.

        :param content: The content to analyze.
        :return: The response generated by OpenAI.
        """
        return self.analyze_with_prompt(content, 'workflow_dispatch')

    def analyze_global_variables(self, content):
        """
        Analyze the given content for global variable-related issues using OpenAI.

        :param content: The content to analyze.
        :return: The response generated by OpenAI.
        """
        return self.analyze_with_prompt(content, 'global_variables')

    def analyze(self, content):
        """
        Analyze the given content for various issues using OpenAI.

        :param content: The content to analyze.
        :return: A dictionary of analyses results.
        """
        return {
            'conditions': self.analyze_conditions(content),
            'vulnerabilities': self.analyze_vulnerabilities(content),
            'workflow_dispatch': self.analyze_workflow_dispatch(content),
            'global_variables': self.analyze_global_variables(content)
        }
