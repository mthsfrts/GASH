from Mining.Analysis.Utils.Utilities import Utility
from Mining.Analysis.DataStruct import AntiPattern
import re


class VulnerabilityDetector:
    """
    Class that detects potential vulnerabilities in a workflow.
    - workflow: The Workflow object to be analyzed.
    - keywords: List of keywords that will be used to detect vulnerabilities.
    """

    def __init__(self, workflow=None):
        self.workflow = workflow
        self.keywords = AntiPattern.KEYWORDS
        self.vulnerabilities = []

    def detect(self):
        if not self.workflow:
            raise Exception('No workflow was provided.')

        content = self.workflow.raw_content
        seen_matches = set()
        lines = content.split("\n")

        # Regular expression to extract key-value pairs
        pattern = re.compile(r'(\w+):\s*(.*)')

        for i, line in enumerate(lines, start=1):
            key_value_match = pattern.search(line)
            if key_value_match:
                key, value = key_value_match.groups()
                for keyword in self.keywords:
                    if re.search(keyword, key, re.IGNORECASE):
                        # Check if value is hardcoded
                        if not re.search(r'\${{\s*secrets\.\w+\s*}}', value.strip()):
                            # Only add to vulnerabilities if value isn't a secret placeholder
                            if (key, i) not in seen_matches:
                                seen_matches.add((key, i))
                                self.vulnerabilities.append({
                                    'keyword': keyword,
                                    'line': i,
                                    'key': key,
                                    'value': value.strip()
                                })

        return self.vulnerabilities
